// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract Vulnerability {
    mapping(address => uint) public balances;

    function deposit(address _to) public payable {
        balances[_to] = balances[_to] + msg.value;
    }

    function getBalanceOf(address addr) public view returns (uint balance) {
        return balances[addr];
    }

    function withdraw(uint _withdrawAmount) public {
        require(balances[msg.sender] >= _withdrawAmount, "Insufficient balance");
        
        // Update the sender's balance first to prevent reentrancy attacks
        balances[msg.sender] -= _withdrawAmount; 

        // Then, transfer the funds
        (bool success, ) = msg.sender.call{value: _withdrawAmount}("");
        require(success, "Transfer failed");
    }

    receive() external payable {}
}