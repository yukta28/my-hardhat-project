// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract Vulnerability {
  mapping(address => uint) public balances;


  function deposit(address _to) public payable {
    balances[_to] = balances[_to] + msg.value;
  }

  function getBalanceOf(address addr) public view returns (uint balance) {
    return balances[addr];
  }


  function withdraw(uint _withdrawAmount) public {
    if(balances[msg.sender] >= _withdrawAmount) {
        
      // (bool withdrawFunctionResult,) = msg.sender.call{value:_withdrawAmount}(""); // Withdraw specified amount
      // require(withdrawFunctionResult, "Withdraw failed");
      // if(withdrawFunctionResult) {
      //   _withdrawAmount;
      // }
      // balances[msg.sender] -= _withdrawAmount;
       require(balances[msg.sender] >= _withdrawAmount, "Insufficient balance");
        
        balances[msg.sender] -= _withdrawAmount; 

        bool success = msg.sender.send(_withdrawAmount);
        require(success, "Transfer failed"); 
    }

  }

  receive() external payable {}
}